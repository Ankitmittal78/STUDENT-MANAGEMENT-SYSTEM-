#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Student {
private:
    int id;
    string name;
    int age;
    string course;

public:
    Student(int id, string name, int age, string course)
        : id(id), name(name), age(age), course(course) {}

    void displayDetails() const {
        cout << "ID: " << id << ", Name: " << name
             << ", Age: " << age << ", Course: " << course << endl;
    }

    int getId() const {
        return id;
    }

    void updateDetails(string newName, int newAge, string newCourse) {
        name = newName;
        age = newAge;
        course = newCourse;
    }
};

class StudentManagementSystem {
private:
    vector<Student> students;

public:
    void addStudent(int id, string name, int age, string course) {
        students.emplace_back(id, name, age, course);
        cout << "Student added successfully!\n";
    }

    void displayAllStudents() const {
        if (students.empty()) {
            cout << "No students available.\n";
            return;
        }
        cout << "Student Records:\n";
        for (const auto& student : students) {
            student.displayDetails();
        }
    }

    void deleteStudent(int id) {
        for (auto it = students.begin(); it != students.end(); ++it) {
            if (it->getId() == id) {
                students.erase(it);
                cout << "Student with ID " << id << " deleted successfully!\n";
                return;
            }
        }
        cout << "Student with ID " << id << " not found!\n";
    }

    void searchStudent(int id) const {
        for (const auto& student : students) {
            if (student.getId() == id) {
                cout << "Student found:\n";
                student.displayDetails();
                return;
            }
        }
        cout << "Student with ID " << id << " not found!\n";
    }

    void updateStudent(int id) {
        for (auto& student : students) {
            if (student.getId() == id) {
                string newName, newCourse;
                int newAge;

                cout << "Enter new name: ";
                cin.ignore();
                getline(cin, newName);
                cout << "Enter new age: ";
                cin >> newAge;
                cin.ignore();
                cout << "Enter new course: ";
                getline(cin, newCourse);

                student.updateDetails(newName, newAge, newCourse);
                cout << "Student details updated successfully!\n";
                return;
            }
        }
        cout << "Student with ID " << id << " not found!\n";
    }
};

int main() {
    StudentManagementSystem sms;
    int choice;

    while (true) {
        cout << "\nStudent Management System Menu:\n";
        cout << "1. Add Student\n";
        cout << "2. Display All Students\n";
        cout << "3. Delete Student\n";
        cout << "4. Search Student\n";
        cout << "5. Update Student\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int id, age;
                string name, course;
                cout << "Enter ID: ";
                cin >> id;
                cin.ignore();
                cout << "Enter Name: ";
                getline(cin, name);
                cout << "Enter Age: ";
                cin >> age;
                cin.ignore();
                cout << "Enter Course: ";
                getline(cin, course);
                sms.addStudent(id, name, age, course);
                break;
            }
            case 2:
                sms.displayAllStudents();
                break;
            case 3: {
                int id;
                cout << "Enter ID of the student to delete: ";
                cin >> id;
                sms.deleteStudent(id);
                break;
            }
            case 4: {
                int id;
                cout << "Enter ID of the student to search: ";
                cin >> id;
                sms.searchStudent(id);
                break;
            }
            case 5: {
                int id;
                cout << "Enter ID of the student to update: ";
                cin >> id;
                sms.updateStudent(id);
                break;
            }
            case 6:
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }
}
